package com.example.damien.projetir.CustomEdit;

import android.content.Context;
import android.graphics.Color;
import android.text.Editable;
import android.text.SpannableString;
import android.text.TextWatcher;
import android.text.style.ForegroundColorSpan;
import android.util.AttributeSet;
import android.view.DragEvent;
import android.view.MotionEvent;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.Toast;

import com.example.damien.projetir.Tests.Difficulty.Difficulty;
import com.example.damien.projetir.Tests.Distance.Distance;
import com.example.damien.projetir.Tests.Orientation.Orientation;

/**
 * Created by Damien on 01/12/2015.
 */
public class CustomEdit extends EditText
{

    private boolean fingerState;
    private int editPosition;
    private int previousPosition;

    public KeyLogData getKeyLogD()
    {
        return keyLogD;
    }

    public void setKeyLogD(KeyLogData keyLogD)
    {
        this.keyLogD = keyLogD;
    }

    private KeyLogData keyLogD;

    private Difficulty _difficulty;
    private int _textSize;
    private Orientation _orientation;
    private Distance _distance;
    private int _nbErrors;
    public boolean _selectionChangeable;

    private boolean started;
    private float chronometer;

                                                  //Ajouter un bundle, pour ecrire les données, a recupérer par le testmanager et ecrire dans les files.

    private int _mode;

    public int get_nbErrors()
    {
        return _nbErrors;
    }

    public void set_nbErrors(int _nbErrors)
    {
        this._nbErrors = _nbErrors;
    }
    public void addError()
    {
        this._nbErrors++;
    }

    public Distance get_Distance()
    {
        return _distance;
    }

    public void set_Distance(Distance _distance)
    {
        this._distance = _distance;
    }

    public int get_TextSize()
    {
        return _textSize;
    }

    public void set_TextSize(int textSize)
    {
        this._textSize = textSize;
    }

    public Difficulty get_Difficulty()
    {
        return _difficulty;
    }

    public void set_Difficulty(Difficulty difficulty)
    {
        this._difficulty = difficulty;
    }

    public Orientation get_Orientation()
    {
        return _orientation;
    }

    public void set_Orientation(Orientation orientation)
    {
        this._orientation = orientation;
    }

    public boolean isTestCompleted()
    {
        //Test de validité du test, ici on test si l'état du delete est 1
        //-1 = InitState, 1 le delete a été fait; 0 le delete etait faux
        return keyLogD.getDeleteDone() == 1;// && getTextSize() == get_TextSize()-1;
    }

    public boolean isStarted() {
        return started;
    }

    public void setStarted(boolean started) {
        this.started = started;
    }

    public float getChronometer() {
        return chronometer;
    }

    public void setChronometer(float chronometer) {
        this.chronometer = chronometer;
    }


    public void startChrono()
    {
        this.setChronometer(System.nanoTime());
    }

    public void stopChrono()
    {
        float chronoValue = System.nanoTime() - getChronometer(); // nanoTime pour être précis, sinon l'update n'est pas assez rapide et on a des temps de 0.0
        this.setChronometer(chronoValue);

    }


    private TextWatcher textController = new TextWatcher()
    {
        @Override
        public void beforeTextChanged(CharSequence s, int start, int count, int after)
        {

        }

        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count)
        {
            if(count < get_TextSize()) {//Si l'event n'est pas généré via generateText()


                if(isStarted()) {
                    if (keyLogD.getDeleteDone() == 0)
                        reloadDueToError();
                    //On ne gère plus le enter ici car le keylogger possède à présent le testManager, l'edit n'as plus besoin de gérer la validation
                    /*if (keyLogD.isReturnPressed()) {
                        if(validateState())
                            return;//Si le test est validé il est inutile de faire les autres process, on arrête donc l'execution de onTextChanged.
                    }*/
                    if (!(s.subSequence(start, start + count).length() == 0 || s == null || s.toString().length() == 0)) {
                        reloadDueToError();
                    }
                }
                else
                {
                    if (s.charAt(start) == ' ') {
                        setStarted(true);
                        reloadTest();
                        startChrono();
                    }
                    else
                        reloadTest();
                }
            }

        }

        @Override
        public void afterTextChanged(Editable s)
        {
        }
    };

    public CustomEdit(Context context) {
        super(context);
        initialisation();
    }

    public CustomEdit(Context context, AttributeSet attrs) {
        super(context, attrs);
        initialisation();
    }

    public void initialisation()
    {
        setFingerState(true);
        previousPosition = 0;
        addTextChangedListener(textController);
        keyLogD = new KeyLogData(false,-1,false,false);
        set_nbErrors(0);
        //setOnKeyListener(new KeyLogger(getContext(), keyLogD));
        setStarted(false);
    }


    public void setFingerState(boolean b)
    {
        fingerState = b;
        _selectionChangeable = !b;
        Toast.makeText(getContext(), "FingerState" + b, Toast.LENGTH_SHORT);
    }

    public boolean getFingerState()
    {
        return fingerState;
    }

    public void showKeyboard()//Affiche le clavier sans avoir besoin de tapper le text edit
    {
        requestFocus();
        InputMethodManager imm = (InputMethodManager) getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
        imm.showSoftInput(this, InputMethodManager.SHOW_IMPLICIT);
    }

    public void hideKeyboard()
    {
        InputMethodManager imm = (InputMethodManager) getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
        imm.hideSoftInputFromWindow(this.getWindowToken(), 0);
    }

    public void generateText()
    {
        SpannableString string;
        string = new SpannableString("Lorem ipsum dol" + get_Difficulty().getLetters() +"sit amet, elit.");
        set_TextSize(string.length());


        editPosition = string.length()/2;

        string.setSpan(new ForegroundColorSpan(Color.RED), editPosition - 1, editPosition + 2, 0);

        this.setText(string);

    }

    public void setCursor()
    {



        int position;

        if(get_Orientation().getOrientation().equalsIgnoreCase("Left"))
        {
            position = (editPosition - get_Distance().getCursorPosition());
        }
        else
        {
            position = (editPosition + get_Distance().getCursorPosition());
        }

        previousPosition = position;

        //Si on est en mode finger, on autorise la selection pour pouvoir appliquer la fonction
        _selectionChangeable = true;
        setSelection(position);
    }

    public void resetForNewTest()
    {
        reloadTest();
        set_nbErrors(0);
    }

    public void reloadDueToError()
    {
        addError();
        reloadTest();
    }

    public void reloadTest()
    {
        if(get_Distance() == null || get_Difficulty() == null)
            Toast.makeText(getContext(), "No context left", Toast.LENGTH_SHORT).show();
        else
        {
            keyLogD.setEnabled(false);
            keyLogD.setDeleteDone(-1);
            keyLogD.setReturnPressed(false);
            generateText();
            setCursor();
        }
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {

        if(event.getAction() == MotionEvent.ACTION_MOVE)
        Toast.makeText(getContext(), "Touch", Toast.LENGTH_SHORT).show();

        if(!isStarted())
            return false;

        if(fingerState == false)
            return false;
        else
        {
            _selectionChangeable = true;//On permet lors du touché au doigt, de rentrer en selection
            return super.onTouchEvent(event);
        }
    }

    @Override
    public boolean onDragEvent(DragEvent event)
    {
        Toast.makeText(getContext(), "Drag", Toast.LENGTH_SHORT).show();
        if(!isStarted())
            return false;

        if(fingerState == false)
            return false;
        else
        {
            _selectionChangeable = true;//On permet lors du touché au doigt, de rentrer en selection
            return super.onDragEvent(event);
        }
    }

    @Override
    protected void onSelectionChanged(int selStart, int selEnd)
    {
        super.onSelectionChanged(selStart, selEnd);


        if(isStarted())//Aucun traitement n'est à faire si on a pas commencé
        {
            if (_selectionChangeable)//Filtre anti Shift
            {

                if (getFingerState() == true)//Si on est en mode finger, on reinterdit la selection autre que via onTouchEvent partie else
                    _selectionChangeable = false;


                if (!(keyLogD == null))
                {
                    if (selStart == this.editPosition + 1)
                        keyLogD.setEnabled(true);
                    else
                        keyLogD.setEnabled(false);
                }
                previousPosition = selStart;

            } else
            {
                if(previousPosition != selStart)
                {
                    _selectionChangeable = true;
                    setSelection(previousPosition);
                }
            }
        }


    }

}
